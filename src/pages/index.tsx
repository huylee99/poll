import type { NextPage } from "next";
import { useRef } from "react";
import Head from "next/head";

import { trpc } from "../utils/trpc";

const QuestionCreator = () => {
  const inputRef = useRef<HTMLInputElement>(null);
  const client = trpc.useContext();

  const { mutate, isLoading } = trpc.useMutation("poll.create", {
    onSuccess: () => {
      client.invalidateQueries(["poll.get-all"]);

      if (inputRef.current) {
        inputRef.current.value = "";
      }
    },
  });

  return (
    <>
      <form
        onSubmit={event => {
          event.preventDefault();
          mutate({ question: inputRef?.current?.value! });
        }}
      >
        <input disabled={isLoading} ref={inputRef} type="text" className="w-full" />
        <button disabled={isLoading} type="submit">
          Submit
        </button>
      </form>
    </>
  );
};

const Home: NextPage = () => {
  const { data, isLoading } = trpc.useQuery(["poll.get-all"]);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>{!isLoading ? JSON.stringify(data?.polls) : null}</h1>
        <QuestionCreator />
      </main>
    </div>
  );
};

export default Home;
